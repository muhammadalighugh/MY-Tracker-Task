rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Products: Allow read for all, write for admins
    match /products/{productId} {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Coupons: Allow read for all, write for admins, update for usage
    match /coupons/{couponId} {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      allow update: if request.auth != null && resource.data.status == 'active' && (
        request.resource.data.usedCount <= resource.data.maxUses ||
        request.resource.data.usedCount == resource.data.usedCount + 1
      );
    }

    // Users: Allow users to read/update their own data, admins to write (aligned with new system)
    match /users/{userId} {
      // Allow users to read and update their own document (for subscription data)
      allow read, update: if request.auth != null && request.auth.uid == userId;
      // Allow creation of user documents upon sign-up
      allow create: if request.auth != null;
      // Allow admins to write all user documents
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      
      // Allow admins to perform all operations on all user documents (from your original rules)
      allow read, write, create, update, delete: if request.auth != null && 
                                               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Subcollections under 'users' - allow users to manage their own subcollections (from your original rules)
    match /users/{userId}/technologies/{techId} {
      allow read, write, create, update, delete: if request.auth != null && request.auth.uid == userId;
      allow read, write, create, update, delete: if request.auth != null && 
                                               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /users/{userId}/coding_sessions/{sessionId} {
      allow read, write, create, update, delete: if request.auth != null && request.auth.uid == userId;
      allow read, write, create, update, delete: if request.auth != null && 
                                               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /users/{userId}/prayerData/{docId} {
      allow read, write, create, delete: if request.auth != null && request.auth.uid == userId;
      allow read, write, create, update, delete: if request.auth != null && 
                                               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /users/{userId}/quranData/{docId} {
      allow read, write, create, delete: if request.auth != null && request.auth.uid == userId;
      allow read, write, create, update, delete: if request.auth != null && 
                                               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /users/{userId}/healthData/{docId} {
      allow read, write, create, delete: if request.auth != null && request.auth.uid == userId;
      allow read, write, create, update, delete: if request.auth != null && 
                                               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /users/{userId}/trackers/{trackerId} {
      allow read, write, create, delete: if request.auth != null && request.auth.uid == userId;
      allow read, write, create, update, delete: if request.auth != null && 
                                               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /users/{userId}/workouts/{docId} {
      allow read, write, create, delete: if request.auth != null && request.auth.uid == userId;
      allow read, write, create, update, delete: if request.auth != null && 
                                               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /users/{userId}/books/{docId} {
      allow read, write, create, delete: if request.auth != null && request.auth.uid == userId;
      allow read, write, create, update, delete: if request.auth != null && 
                                               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /users/{userId}/readingSessions/{docId} {
      allow read, write, create, delete: if request.auth != null && request.auth.uid == userId;
      allow read, write, create, update, delete: if request.auth != null && 
                                               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /users/{userId}/settings/{docId} {
      allow read, write, create, delete: if request.auth != null && request.auth.uid == userId;
      allow read, write, create, update, delete: if request.auth != null && 
                                               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /users/{userId}/expenses/{docId} {
      allow read, write, create, delete: if request.auth != null && request.auth.uid == userId;
      allow read, write, create, update, delete: if request.auth != null && 
                                               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /users/{userId}/incomes/{docId} {
      allow read, write, create, delete: if request.auth != null && request.auth.uid == userId;
      allow read, write, create, update, delete: if request.auth != null && 
                                               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /users/{userId}/debts/{docId} {
      allow read, write, create, delete: if request.auth != null && request.auth.uid == userId;
      allow read, write, create, update, delete: if request.auth != null && 
                                               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /users/{userId}/budgets/{docId} {
      allow read, write, create, delete: if request.auth != null && request.auth.uid == userId;
      allow read, write, create, update, delete: if request.auth != null && 
                                               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    match /users/{userId}/mobileUsage/{docId} {
      allow read, write, create, delete: if request.auth != null && request.auth.uid == userId;
      allow read, write, create, update, delete: if request.auth != null && 
                                               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // 'tasks' collection rules (from your original rules)
    match /tasks/{taskId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      allow list: if request.auth != null;
      // Allow admins full access to all tasks
      allow read, write, create, update, delete: if request.auth != null && 
                                               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Deny all other access explicitly (from your original rules)
    match /{document=**} {
      allow read, write: if false;
    }
  }
}